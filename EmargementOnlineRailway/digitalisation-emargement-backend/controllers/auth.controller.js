const bcrypt = require("bcryptjs"); // Biblioth√®que pour le hachage de mots de passe (non encore utilis√©e ici)
const jwt = require("jsonwebtoken"); // Utilis√© pour g√©n√©rer des jetons JWT
const db = require("../config/db"); // Connexion √† la base de donn√©es

// üîê Contr√¥leur de connexion - Authentifie un utilisateur et renvoie un token JWT
const login = async (req, res) => {
    const { email, mot_de_passe } = req.body; // R√©cup√©ration des identifiants depuis le body de la requ√™te

    try {
        // On pr√©pare les r√¥les disponibles dans le syst√®me avec les infos sp√©cifiques √† chaque table
        const roles = [
            { table: "etudiant", idCol: "NEtudiant", nomCol: "nom", prenomCol: "prenom" },
            { table: "professeur", idCol: "id_professeur", nomCol: "nom", prenomCol: "prenom" },
            { table: "cfa", idCol: "id_cfa", nomCol: "nom", prenomCol: "prenom" }
        ];

        // üîç On parcourt chaque table pour tenter de trouver l'utilisateur
        for (const roleEntry of roles) {
            const { table, idCol, nomCol, prenomCol } = roleEntry;

            // Requ√™te SQL pour v√©rifier si l‚Äôemail existe dans cette table
            const [rows] = await db.query(`SELECT * FROM ${table} WHERE email = ?`, [email]);

            // Si l‚Äôutilisateur est trouv√©
            if (rows.length) {
                const user = rows[0];

                // V√©rification du mot de passe (ici en clair, mais pr√™t pour utiliser bcrypt)
                if (user.mot_de_passe === mot_de_passe /* || await bcrypt.compare(mot_de_passe, user.mot_de_passe) */) {
                    const role = table;

                    // On pr√©pare les donn√©es √† stocker dans le token JWT
                    const payload = {
                        id: user[idCol],
                        role,
                        nom: user[nomCol],
                        prenom: user[prenomCol]
                    };

                    // üîê G√©n√©ration du token avec une dur√©e de validit√© de 6 heures
                    const token = jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: "6h" });

                    // Envoi de la r√©ponse avec le token et les infos de l'utilisateur
                    return res.json({ token, role, nom: user[nomCol], prenom: user[prenomCol] });
                }
            }
        }

        // Si aucun r√¥le n‚Äôa match√©, on renvoie une erreur d‚Äôidentifiants
        return res.status(401).json({ message: "Identifiants incorrects." });

    } catch (err) {
        // üí• Gestion des erreurs serveur
        console.error("Erreur dans login :", err);
        res.status(500).json({ message: "Erreur serveur." });
    }
};

// üîì Contr√¥leur de d√©connexion - Pas de vraie invalidation du token c√¥t√© serveur
const logout = async (req, res) => {
    try {
        // Le front est responsable de supprimer le token (ex: localStorage)
        return res.status(200).json({ message: "D√©connexion r√©ussie. Veuillez supprimer le token c√¥t√© client." });
    } catch (err) {
        console.error("Erreur logout :", err);
        res.status(500).json({ message: "Erreur serveur lors de la d√©connexion." });
    }
};

// Export des fonctions pour les routes
module.exports = { login, logout };
