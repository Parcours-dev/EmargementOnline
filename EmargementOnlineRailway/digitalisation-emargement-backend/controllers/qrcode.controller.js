const crypto = require("crypto");              // Utilis√© pour g√©n√©rer des tokens s√©curis√©s
const db = require("../config/db");            // Connexion base de donn√©es
const { UBToken } = require("../blockchain/blockchain"); // Smart contract local

// ==============================
// üéì 1. G√©n√©ration d‚Äôun QR Code par le professeur
// ==============================
const generateQrCode = async (req, res) => {
    const idProf = req.user.id;
    const { id } = req.params; // format attendu : id_cours-id_groupe-id_professeur-date

    try {
        // üß© On d√©coupe le param√®tre d‚Äôidentifiant en √©l√©ments
        const [id_cours, id_groupe, id_professeur, ...dateParts] = id.split("-");
        const date_heure_debut = dateParts.join("-");

        if (!id_cours || !id_groupe || !id_professeur || !date_heure_debut) {
            return res.status(400).json({ message: "Identifiant de cr√©neau invalide." });
        }

        // üîç V√©rifie que le cr√©neau existe bien en base
        const [creneaux] = await db.query(
            `SELECT * FROM creneau WHERE id_cours = ? AND id_groupe = ? AND id_professeur = ? AND date_heure_debut = ?`,
            [id_cours, id_groupe, id_professeur, date_heure_debut]
        );

        if (creneaux.length === 0) {
            return res.status(404).json({ message: "Cr√©neau introuvable." });
        }

        const token = crypto.randomBytes(16).toString("hex");

        // D√©cale de +2h (UTC+2)
        const now = new Date();
        const nowPlus2h = new Date(now.getTime() + 2 * 60 * 60 * 1000);
        const expirationPlus2h = new Date(nowPlus2h.getTime() + 90 * 1000); // +90 secondes

        await db.query(
            `INSERT INTO qr_code (token, date_creation, date_expiration, id_cours, id_groupe, id_professeur, date_heure_debut)
     VALUES (?, ?, ?, ?, ?, ?, ?)`,
            [token, nowPlus2h, expirationPlus2h, id_cours, id_groupe, id_professeur, date_heure_debut]
        );


        // ‚úÖ Renvoie le token et l‚ÄôURL de scan
        res.json({
            message: "QR Code g√©n√©r√© ‚úÖ",
            token,
            expires_in: 90,
            scan_url: `https://emargementonline-production.up.railway.app/scan/${token}`
        });

    } catch (err) {
        console.error("Erreur generateQrCode :", err);
        res.status(500).json({ message: "Erreur serveur lors de la g√©n√©ration du QR code." });
    }
};

// ========================================
// üßç‚Äç‚ôÇÔ∏è 2. Scan du QR Code par un √©tudiant
// ========================================
const enregistrerPresenceViaQr = async (req, res) => {
    const { token } = req.params;
    const { empreinte_device } = req.body;
    const user = req.user;

    try {
        // üîí V√©rifie que seul un √©tudiant peut acc√©der √† cette route
        if (!user || user.role !== "etudiant") {
            return res.status(403).json({ message: "Seuls les √©tudiants peuvent √©marger via QR Code." });
        }

        // 1Ô∏è‚É£ V√©rifie la validit√© du QR code
        const [result] = await db.query(
            `SELECT * FROM qr_code WHERE token = ? AND date_expiration >= NOW()`,
            [token]
        );

        if (result.length === 0) {
            return res.status(400).json({ message: "QR Code expir√© ou invalide." });
        }

        const qr = result[0];

        // 2Ô∏è‚É£ V√©rifie que l‚Äôempreinte device n‚Äôa pas d√©j√† √©t√© utilis√©e
        const [deviceExists] = await db.query(
            `SELECT * FROM emargement 
             WHERE empreinte_device = ? AND id_cours = ? AND date_heure_debut = ?`,
            [empreinte_device, qr.id_cours, qr.date_heure_debut]
        );

        if (deviceExists.length > 0) {
            return res.status(403).json({ message: "Ce t√©l√©phone a d√©j√† √©t√© utilis√© pour ce cours." });
        }

        // 3Ô∏è‚É£ V√©rifie que l‚Äô√©tudiant n‚Äôa pas d√©j√† √©marg√©
        const [existant] = await db.query(
            `SELECT * FROM emargement 
             WHERE NEtudiant = ? AND id_cours = ? AND date_heure_debut = ?`,
            [user.id, qr.id_cours, qr.date_heure_debut]
        );

        if (existant.length > 0) {
            return res.status(409).json({ message: "Pr√©sence d√©j√† enregistr√©e pour ce cours." });
        }

        // 4Ô∏è‚É£ Enregistrement de la pr√©sence
        await db.query(
            `INSERT INTO emargement 
             (NEtudiant, id_cours, id_groupe, id_professeur, date_heure_signature, date_heure_debut, 
              token_utilis√©, empreinte_device, ip_adresse, user_agent)
             VALUES (?, ?, ?, ?, NOW(), ?, ?, ?, ?, ?)`,
            [
                user.id,
                qr.id_cours,
                qr.id_groupe,
                qr.id_professeur,
                qr.date_heure_debut,
                token,
                empreinte_device || null,
                req.ip,
                req.headers["user-agent"]
            ]
        );

        // 5Ô∏è‚É£ R√©cup√©ration de l'adresse ETH de l'√©tudiant
        const [[etu]] = await db.query(
            "SELECT adresse_eth FROM etudiant WHERE NEtudiant = ?",
            [user.id]
        );

        if (!etu || !etu.adresse_eth) {
            console.warn("‚ö†Ô∏è Pas d‚Äôadresse ETH pour l‚Äô√©tudiant", user.id);
        } else {
            try {
                const tx = await rewardStudent(etu.adresse_eth, 10); // 10 UBT
                await tx.wait();
                console.log(`‚úÖ 10 UBT envoy√©s √† ${etu.adresse_eth} (tx: ${tx.hash})`);
            } catch (err) {
                console.error("‚ùå √âchec envoi UBToken :", err.message);
            }
        }

        res.status(200).json({ message: "Pr√©sence enregistr√©e et r√©compense envoy√©e ‚úÖ" });

    } catch (err) {
        console.error("‚ùå Erreur g√©n√©rale :", err);
        res.status(500).json({ message: "Erreur serveur." });
    }
};


module.exports = {
    generateQrCode,
    enregistrerPresenceViaQr
};
