const db = require("../config/db"); // Connexion √† la base de donn√©es

function toMySQLDateTime(isoString) {
    return new Date(isoString).toISOString().slice(0, 19).replace("T", " ");
}


// ==============================
// üìù Validation manuelle par le professeur
// ==============================
const validerPresenceManuelle = async (req, res) => {
    const { email, id_cours, id_groupe, date_heure_debut } = req.body;
    const dateMySQL = toMySQLDateTime(date_heure_debut);

    const professeur = req.user; // R√©cup√©ration du prof via le token JWT

    try {
        // üìß On cherche l'√©tudiant via son email
        const [etudiants] = await db.query("SELECT * FROM etudiant WHERE email = ?", [email]);
        if (etudiants.length === 0) return res.status(404).json({ message: "√âtudiant introuvable." });

        const etudiant = etudiants[0];

        // ‚ùå V√©rifie si une pr√©sence est d√©j√† enregistr√©e
        const [existants] = await db.query(
            "SELECT * FROM emargement WHERE NEtudiant = ? AND id_cours = ? AND id_groupe = ? AND date_heure_debut = ?",
            [etudiant.NEtudiant, id_cours, id_groupe, date_heure_debut]
        );

        if (existants.length > 0) {
            return res.status(409).json({ message: "Pr√©sence d√©j√† enregistr√©e pour cet √©tudiant." });
        }

        // ‚úÖ Ins√®re une pr√©sence avec les infos du prof + ajout manuel = true
        await db.query(
            `INSERT INTO emargement
             (NEtudiant, id_cours, id_groupe, id_professeur, date_heure_signature, date_heure_debut, ajout_manuel, valide_par)
             VALUES (?, ?, ?, ?, NOW(), ?, true, ?)`,
            [etudiant.NEtudiant, id_cours, id_groupe, professeur.id, dateMySQL, `${professeur.nom} ${professeur.prenom}`]
        );

        // üéÅ R√©compense : envoie de 10 UBToken √† l'√©tudiant
        const { rewardStudent } = require("../blockchain/blockchain");

        try {
            if (!etudiant.adresse_eth) {
                console.warn("‚ö†Ô∏è Adresse ETH manquante pour l'√©tudiant", etudiant.NEtudiant);
            } else {
                const tx = await rewardStudent(etudiant.adresse_eth, 10);
                await tx.wait();
                console.log(`‚úÖ ${etudiant.nom} a re√ßu 10 UBT (${tx.hash})`);
            }
        } catch (err) {
            console.error("‚ùå Erreur envoi UBToken :", err.message);
        }


        res.status(200).json({ message: "Pr√©sence ajout√©e manuellement ‚úÖ" });
    } catch (err) {
        console.error("Erreur validation manuelle :", err);
        res.status(500).json({ message: "Erreur serveur." });
    }
};

// ==============================
// üìã Liste des √©tudiants attendus + leur statut de pr√©sence
// ==============================
const getListeEtudiantsAvecPresences = async (req, res) => {
    const { id_cours, id_groupe, date_heure_debut } = req.query;

    try {
        // üì• V√©rifie que tous les param√®tres sont bien fournis
        if (!id_cours || !id_groupe || !date_heure_debut) {
            return res.status(400).json({ message: "Param√®tres manquants." });
        }

        // üë• R√©cup√®re tous les √©tudiants du groupe (TD ou anglais)
        const [etudiants] = await db.query(`
            SELECT
                e.NEtudiant,
                e.nom,
                e.prenom,
                e.email
            FROM etudiant e
            WHERE e.id_groupe_TD = ? OR e.id_groupe_Anglais = ?
        `, [id_groupe, id_groupe]);

        // üîÑ Pour chaque √©tudiant, on v√©rifie s‚Äôil a √©t√© √©marg√© pour ce cr√©neau
        const results = await Promise.all(etudiants.map(async (etudiant) => {
            const [presences] = await db.query(
                `SELECT * FROM emargement 
                 WHERE NEtudiant = ? AND id_cours = ? AND id_groupe = ? AND date_heure_debut = ?`,
                [etudiant.NEtudiant, id_cours, id_groupe, date_heure_debut]
            );

            return {
                ...etudiant,
                present: presences.length > 0, // true si pr√©sence trouv√©e
                presence: presences[0] || null // d√©tails de pr√©sence si existant
            };
        }));

        res.status(200).json(results);
    } catch (err) {
        console.error("Erreur r√©cup√©ration des pr√©sences :", err);
        res.status(500).json({ message: "Erreur serveur." });
    }
};

// ==============================
// üéì Liste des cours d‚Äôun √©tudiant connect√©, avec son statut de pr√©sence
// ==============================
const getCoursEtudiant = async (req, res) => {
    const idEtudiant = req.user.id;

    // üîí S√©curit√© : seul un √©tudiant peut acc√©der √† ses cours
    if (req.user.role !== "etudiant") {
        return res.status(403).json({ message: "Acc√®s non autoris√©." });
    }

    const { date, from, to } = req.query;
    let dateDebut, dateFin;

    // üóìÔ∏è Gestion des filtres de date
    if (date) {
        dateDebut = `${date} 00:00:00`;
        dateFin = `${date} 23:59:59`;
    } else if (from && to) {
        dateDebut = `${from} 00:00:00`;
        dateFin = `${to} 23:59:59`;
    } else {
        // Aucun filtre = r√©cup√®re tout
        dateDebut = "2000-01-01 00:00:00";
        dateFin = "2100-01-01 00:00:00";
    }

    try {
        // üîç R√©cup√©ration des groupes de l‚Äô√©tudiant
        const [[etu]] = await db.query(
            "SELECT id_groupe_TD, id_groupe_Anglais FROM etudiant WHERE NEtudiant = ?",
            [idEtudiant]
        );

        if (!etu) {
            return res.status(404).json({ message: "√âtudiant introuvable" });
        }

        // üìö R√©cup√©ration des cours dans les groupes de l'√©tudiant
        const [cours] = await db.query(
            `SELECT
                 c.id_cours,
                 c.nom AS nom_cours,
                 g.id_groupe,                    -- ‚úÖ AJOUT√â
                 g.nom AS nom_groupe,
                 cr.date_heure_debut,
                 cr.date_heure_fin
             FROM creneau cr
                      JOIN cours c ON cr.id_cours = c.id_cours
                      JOIN groupe g ON cr.id_groupe = g.id_groupe
             WHERE cr.id_groupe IN (?, ?)
               AND cr.date_heure_debut BETWEEN ? AND ?
             ORDER BY cr.date_heure_debut ASC`,
            [etu.id_groupe_TD, etu.id_groupe_Anglais, dateDebut, dateFin]
        );

        // ‚ûï On ajoute le statut de pr√©sence √† chaque cours
        for (const c of cours) {
            const [presence] = await db.query(
                `SELECT * FROM emargement
                 WHERE NEtudiant = ? AND id_cours = ? AND date_heure_debut = ?`,
                [idEtudiant, c.id_cours, c.date_heure_debut]
            );
            c.present = presence.length > 0;
        }

        res.json(cours);
    } catch (err) {
        console.error("Erreur r√©cup√©ration cours √©tudiant :", err);
        res.status(500).json({ message: "Erreur serveur." });
    }
};


module.exports = {
    validerPresenceManuelle,
    getListeEtudiantsAvecPresences,
    getCoursEtudiant
};
